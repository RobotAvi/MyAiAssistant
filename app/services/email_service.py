import smtplib
import ssl
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from email.mime.base import MimeBase
from email import encoders
import os
from typing import Optional, Dict, Any
from app.core.config import settings
from app.services.llm_service import LLMService

class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–∏—Å–µ–º"""
    
    def __init__(self):
        self.smtp_server = settings.smtp_server
        self.smtp_port = settings.smtp_port
        self.llm_service = LLMService()
    
    async def send_application_email(
        self,
        user_email: str,
        user_password: str,
        hr_email: str,
        job_title: str,
        company_name: str,
        cover_letter: str,
        resume_path: str,
        candidate_name: str = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é HR"""
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é LLM
            if not candidate_name:
                candidate_name = user_email.split('@')[0]
            
            email_content = await self.llm_service.generate_hr_email(
                candidate_name=candidate_name,
                job_title=job_title,
                company_name=company_name,
                cover_letter=cover_letter
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MimeMultipart()
            message["From"] = user_email
            message["To"] = hr_email
            message["Subject"] = email_content["subject"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            message.attach(MimeText(email_content["body"], "plain", "utf-8"))
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ä–µ–∑—é–º–µ
            if os.path.exists(resume_path):
                with open(resume_path, "rb") as attachment:
                    part = MimeBase('application', 'octet-stream')
                    part.set_payload(attachment.read())
                
                encoders.encode_base64(part)
                
                filename = os.path.basename(resume_path)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {filename}'
                )
                
                message.attach(part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(user_email, user_password)
                server.sendmail(user_email, hr_email, message.as_string())
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    async def send_notification_email(
        self,
        user_email: str,
        user_password: str,
        subject: str,
        body: str,
        recipient_email: str = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email"""
        
        try:
            recipient = recipient_email or user_email
            
            message = MimeMultipart()
            message["From"] = user_email
            message["To"] = recipient
            message["Subject"] = subject
            
            message.attach(MimeText(body, "plain", "utf-8"))
            
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(user_email, user_password)
                server.sendmail(user_email, recipient, message.as_string())
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_job_digest(
        self,
        user_email: str,
        user_password: str,
        jobs: list,
        recipient_email: str = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        
        try:
            recipient = recipient_email or user_email
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –ø–∏—Å—å–º–æ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
            html_body = self._create_jobs_html(jobs)
            
            message = MimeMultipart("alternative")
            message["From"] = user_email
            message["To"] = recipient
            message["Subject"] = f"HR Assistant: –ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"
            
            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
            html_part = MimeText(html_body, "html", "utf-8")
            message.attach(html_part)
            
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(user_email, user_password)
                server.sendmail(user_email, recipient, message.as_string())
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    def _create_jobs_html(self, jobs: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
        
        html = """
        <html>
            <head>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .job { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
                    .job-title { font-size: 18px; font-weight: bold; color: #333; }
                    .company { color: #666; margin: 5px 0; }
                    .salary { color: #008000; font-weight: bold; }
                    .match-score { background: #007bff; color: white; padding: 2px 8px; border-radius: 3px; font-size: 12px; }
                    .location { color: #888; }
                    .description { margin: 10px 0; line-height: 1.4; }
                    .link { color: #007bff; text-decoration: none; }
                </style>
            </head>
            <body>
                <h2>üéØ –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –≤–∞—Å</h2>
                <p>HR Assistant –Ω–∞—à–µ–ª –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É —Ä–µ–∑—é–º–µ:</p>
        """
        
        for job in jobs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –≤–∞–∫–∞–Ω—Å–∏–π
            salary_text = ""
            if job.get('salary_from') or job.get('salary_to'):
                salary_from = job.get('salary_from', 0)
                salary_to = job.get('salary_to', 0)
                currency = job.get('currency', 'RUB')
                
                if salary_from and salary_to:
                    salary_text = f"{salary_from:,} - {salary_to:,} {currency}"
                elif salary_from:
                    salary_text = f"–æ—Ç {salary_from:,} {currency}"
                elif salary_to:
                    salary_text = f"–¥–æ {salary_to:,} {currency}"
            
            match_score = job.get('match_score', 0)
            match_percent = int(match_score * 100) if match_score else 0
            
            description = job.get('llm_analysis', job.get('description', ''))[:200] + "..."
            
            html += f"""
                <div class="job">
                    <div class="job-title">{job.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                    <div class="company">üè¢ {job.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')}</div>
                    {f'<div class="salary">üí∞ {salary_text}</div>' if salary_text else ''}
                    <div class="location">üìç {job.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</div>
                    <div style="margin: 8px 0;">
                        <span class="match-score">–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {match_percent}%</span>
                    </div>
                    <div class="description">{description}</div>
                    <div style="margin-top: 10px;">
                        <a href="{job.get('url', '#')}" class="link">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>
                    </div>
                </div>
            """
        
        html += """
                <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                    <p><strong>–ß—Ç–æ –¥–∞–ª—å—à–µ?</strong></p>
                    <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ HR Assistant, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
                </div>
            </body>
        </html>
        """
        
        return html
    
    def validate_email_settings(self, email: str, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email"""
        
        try:
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(email, password)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False