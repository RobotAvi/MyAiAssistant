import asyncio
from celery import Celery
from datetime import datetime, time
from sqlalchemy.orm import Session
from typing import List

from app.core.config import settings
from app.db.database import SessionLocal
from app.models.user import User
from app.models.resume import Resume
from app.services.job_scraper import JobScraper
from app.services.llm_service import LLMService
from app.services.telegram_service import TelegramService
from app.services.email_service import EmailService

# –°–æ–∑–¥–∞–µ–º Celery app
celery_app = Celery(
    'hr_assistant',
    broker=settings.redis_url,
    backend=settings.redis_url
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='Europe/Moscow',
    enable_utc=True,
)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
celery_app.conf.beat_schedule = {
    'daily-job-search': {
        'task': 'app.services.scheduler.daily_job_search',
        'schedule': time(hour=9, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    },
    'weekly-summary': {
        'task': 'app.services.scheduler.weekly_summary',
        'schedule': time(hour=18, minute=0),  # –ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00
    },
}

@celery_app.task
def daily_job_search():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    asyncio.run(_daily_job_search_async())

async def _daily_job_search_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∑—é–º–µ
        users = db.query(User).filter(
            User.is_active == True,
            User.resumes.any()
        ).all()
        
        print(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        job_scraper = JobScraper()
        telegram_service = TelegramService()
        
        for user in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                resume = db.query(Resume).filter(
                    Resume.user_id == user.id
                ).order_by(Resume.created_at.desc()).first()
                
                if not resume:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ
                keywords = resume.skills[:5] if resume.skills else []
                if resume.position_title:
                    keywords.append(resume.position_title)
                
                # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
                jobs = await job_scraper.search_jobs(
                    keywords=keywords,
                    location=resume.location,
                    experience_level=_determine_experience_level(resume.experience_years),
                    limit=20
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (score > 0.6)
                relevant_jobs = [job for job in jobs if job.get('match_score', 0) > 0.6]
                
                if relevant_jobs:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    if user.telegram_chat_id:
                        await telegram_service.send_jobs_notification(
                            user_chat_id=user.telegram_chat_id,
                            jobs=relevant_jobs,
                            user_id=user.id
                        )
                    
                    print(f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_jobs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {user.email}")
                else:
                    print(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {user.email} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}: {e}")
                continue
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
    
    finally:
        db.close()

@celery_app.task
def weekly_summary():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º"""
    
    asyncio.run(_weekly_summary_async())

async def _weekly_summary_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    
    db = SessionLocal()
    
    try:
        from app.models.job import JobApplication
        from datetime import datetime, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.utcnow() - timedelta(days=7)
        
        users = db.query(User).filter(User.is_active == True).all()
        telegram_service = TelegramService()
        
        for user in users:
            if not user.telegram_chat_id:
                continue
                
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
            applications = db.query(JobApplication).filter(
                JobApplication.user_id == user.id,
                JobApplication.applied_at >= week_ago
            ).all()
            
            if not applications:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            total_applications = len(applications)
            responded = len([app for app in applications if app.response_received])
            pending = total_applications - responded
            
            summary = f"""
üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞*

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:
‚Ä¢ –ü–æ–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_applications}
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {responded}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {pending}

{f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—Ç–∫–ª–∏–∫–∞: {(responded/total_applications*100):.1f}%" if total_applications > 0 else ""}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å! –£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã! üçÄ
            """
            
            await telegram_service._send_message(user.telegram_chat_id, summary)
            
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è {user.email}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–µ: {e}")
    
    finally:
        db.close()

@celery_app.task
def check_job_responses():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ—á—Ç–æ–π)"""
    
    # –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    # –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pass

@celery_app.task
def backup_data():
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pass

def _determine_experience_level(experience_years: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–µ—Ç"""
    
    if experience_years is None:
        return None
    
    if experience_years < 1:
        return 'junior'
    elif experience_years <= 3:
        return 'middle'
    else:
        return 'senior'

class JobSearchScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    
    def __init__(self):
        self.is_running = False
    
    async def start_daily_search(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        
        if self.is_running:
            return
        
        self.is_running = True
        
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –µ—Å–ª–∏ 9:00, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                now = datetime.now()
                if now.hour == 9 and now.minute == 0:
                    await _daily_job_search_async()
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)
    
    def stop_daily_search(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self.is_running = False
    
    async def run_search_now(self, user_id: int = None):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ—Ö"""
        
        if user_id:
            await self._search_for_user(user_id)
        else:
            await _daily_job_search_async()
    
    async def _search_for_user(self, user_id: int):
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        db = SessionLocal()
        
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if not user:
                return
            
            resume = db.query(Resume).filter(
                Resume.user_id == user_id
            ).order_by(Resume.created_at.desc()).first()
            
            if not resume:
                return
            
            job_scraper = JobScraper()
            telegram_service = TelegramService()
            
            keywords = resume.skills[:5] if resume.skills else []
            if resume.position_title:
                keywords.append(resume.position_title)
            
            jobs = await job_scraper.search_jobs(
                keywords=keywords,
                location=resume.location,
                experience_level=_determine_experience_level(resume.experience_years),
                limit=20
            )
            
            relevant_jobs = [job for job in jobs if job.get('match_score', 0) > 0.6]
            
            if relevant_jobs and user.telegram_chat_id:
                await telegram_service.send_jobs_notification(
                    user_chat_id=user.telegram_chat_id,
                    jobs=relevant_jobs,
                    user_id=user.id
                )
        
        finally:
            db.close()