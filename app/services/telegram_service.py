import asyncio
import json
from typing import Dict, List, Any, Optional
import aiohttp
from datetime import datetime
from sqlalchemy.orm import Session

from app.core.config import settings
from app.models.telegram_notification import TelegramNotification
from app.models.user import User

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.bot_token = settings.telegram_bot_token
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_notification(
        self, 
        notification: TelegramNotification, 
        db: Session
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == notification.user_id).first()
            if not user or not user.telegram_chat_id:
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"*{notification.title}*\n\n{notification.message}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            data = {
                'chat_id': user.telegram_chat_id,
                'text': message_text,
                'parse_mode': 'Markdown'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if notification.has_buttons and notification.buttons_data:
                data['reply_markup'] = json.dumps(
                    self._create_inline_keyboard(notification.buttons_data)
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        if result.get('ok'):
                            notification.telegram_message_id = str(result['result']['message_id'])
                            notification.sent_at = datetime.utcnow()
                            db.commit()
                            return True
            
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_jobs_notification(
        self,
        user_chat_id: str,
        jobs: List[Dict[str, Any]],
        user_id: int
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        
        try:
            if not jobs:
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üéØ *–ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!*\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for i, job in enumerate(jobs[:3], 1):
                match_score = job.get('match_score', 0)
                match_percent = int(match_score * 100) if match_score else 0
                
                salary_text = ""
                if job.get('salary_from') or job.get('salary_to'):
                    salary_from = job.get('salary_from', 0)
                    salary_to = job.get('salary_to', 0)
                    currency = job.get('currency', 'RUB')
                    
                    if salary_from and salary_to:
                        salary_text = f" ({salary_from:,}-{salary_to:,} {currency})"
                    elif salary_from:
                        salary_text = f" (–æ—Ç {salary_from:,} {currency})"
                
                message += f"{i}. *{job.get('title')}*\n"
                message += f"üè¢ {job.get('company_name')}{salary_text}\n"
                message += f"üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {match_percent}%\n\n"
            
            if len(jobs) > 3:
                message += f"... –∏ –µ—â–µ {len(jobs) - 3} –≤–∞–∫–∞–Ω—Å–∏–π\n\n"
            
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            keyboard = self._create_jobs_keyboard(jobs, user_id)
            
            data = {
                'chat_id': user_chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'reply_markup': json.dumps(keyboard)
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                
                async with session.post(url, json=data) as response:
                    return response.status == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö: {e}")
            return False
    
    async def handle_update(self, update: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (callback_query, messages)"""
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
            if 'callback_query' in update:
                await self._handle_callback_query(update['callback_query'], db)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif 'message' in update:
                await self._handle_message(update['message'], db)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update: {e}")
    
    async def _handle_callback_query(self, callback_query: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        
        try:
            query_data = callback_query.get('data', '')
            chat_id = callback_query['from']['id']
            message_id = callback_query['message']['message_id']
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if query_data.startswith('select_job_'):
                job_id = query_data.replace('select_job_', '')
                await self._handle_job_selection(chat_id, job_id, message_id, db)
            
            elif query_data.startswith('apply_jobs_'):
                user_id = query_data.replace('apply_jobs_', '')
                await self._handle_apply_jobs(chat_id, user_id, message_id, db)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback query
            await self._answer_callback_query(callback_query['id'])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")
    
    async def _handle_message(self, message: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –ö–æ–º–∞–Ω–¥–∞ /start
            if text == '/start':
                welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Assistant!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –ò—â—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–º—É —Ä–µ–∑—é–º–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫–∏ –∏ –ø–∏—Å—å–º–∞ HR
‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç.
                """
                
                await self._send_message(chat_id, welcome_text)
            
            # –ö–æ–º–∞–Ω–¥–∞ /help
            elif text == '/help':
                help_text = """
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫

üîß *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Å–∞–π—Ç–µ
2. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –±–æ—Ç –∏—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
3. –í—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–µ—Ä–µ–∑ Telegram
4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫–∏
                """
                
                await self._send_message(chat_id, help_text)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_job_selection(
        self, 
        chat_id: str, 
        job_id: str, 
        message_id: str, 
        db: Session
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        pass
    
    async def _handle_apply_jobs(
        self, 
        chat_id: str, 
        user_id: str, 
        message_id: str, 
        db: Session
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        
        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ API
        pass
    
    def _create_inline_keyboard(self, buttons_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        
        keyboard = {"inline_keyboard": []}
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if 'buttons' in buttons_data:
            for button in buttons_data['buttons']:
                keyboard["inline_keyboard"].append([{
                    "text": button['text'],
                    "callback_data": button['callback_data']
                }])
        
        return keyboard
    
    def _create_jobs_keyboard(self, jobs: List[Dict[str, Any]], user_id: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
        
        keyboard = {"inline_keyboard": []}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º 10)
        for i, job in enumerate(jobs[:10]):
            job_id = job.get('id') or job.get('external_id')
            title = job.get('title', '–í–∞–∫–∞–Ω—Å–∏—è')[:30] + ("..." if len(job.get('title', '')) > 30 else "")
            
            keyboard["inline_keyboard"].append([{
                "text": f"{'‚òëÔ∏è' if job.get('selected') else '‚¨ú'} {title}",
                "callback_data": f"select_job_{job_id}"
            }])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"
        keyboard["inline_keyboard"].append([{
            "text": "üì§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
            "callback_data": f"apply_jobs_{user_id}"
        }])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
        keyboard["inline_keyboard"].append([{
            "text": "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
            "url": f"{settings.frontend_url}/jobs"
        }])
        
        return keyboard
    
    async def _send_message(self, chat_id: str, text: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': kwargs.get('parse_mode', 'Markdown')
            }
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                
                async with session.post(url, json=data) as response:
                    return response.status == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _answer_callback_query(self, callback_query_id: str, text: str = None) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback query"""
        
        try:
            data = {'callback_query_id': callback_query_id}
            if text:
                data['text'] = text
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/answerCallbackQuery"
                
                async with session.post(url, json=data) as response:
                    return response.status == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback query: {e}")
            return False
    
    async def setup_webhook(self, webhook_url: str = None) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
        
        try:
            url = webhook_url or f"{settings.frontend_url.replace('3000', '8000')}/api/telegram/webhook"
            
            data = {'url': url}
            
            async with aiohttp.ClientSession() as session:
                webhook_url_api = f"{self.base_url}/setWebhook"
                
                async with session.post(webhook_url_api, json=data) as response:
                    return response.status == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    async def delete_webhook(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/deleteWebhook"
                
                async with session.post(url) as response:
                    return response.status == 200
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
            return False