version: '3.8'

# HR Assistant - Production Docker Compose
# Оптимизированная конфигурация для российских хостингов

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hr-assistant-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Мониторинг
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/app/uploads:ro
      - ./static:/app/static:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hr-assistant-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-hr_assistant}
      POSTGRES_USER: ${DB_USER:-hr_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"  # Только локальный доступ
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-hr_user} -d ${DB_NAME:-hr_assistant}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Оптимизация для production
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c wal_buffers=16MB
      -c max_connections=100
      -c log_min_duration_statement=1000

  # Redis for Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: hr-assistant-redis
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"  # Только локальный доступ
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: hr-assistant-backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-hr_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-hr_assistant}
      - REDIS_URL=redis://redis:6379
      - DEBUG=False
      - ENVIRONMENT=production
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: hr-assistant-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://${DOMAIN:-localhost}/api
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: hr-assistant-celery
    command: celery -A app.services.scheduler worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-hr_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-hr_assistant}
      - REDIS_URL=redis://redis:6379
      - DEBUG=False
      - ENVIRONMENT=production
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.services.scheduler", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: hr-assistant-celery-beat
    command: celery -A app.services.scheduler beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-hr_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-hr_assistant}
      - REDIS_URL=redis://redis:6379
      - DEBUG=False
      - ENVIRONMENT=production
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr_network
    restart: unless-stopped
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hr-assistant-prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Только локальный доступ
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - hr_network
    restart: unless-stopped

  # Monitoring: Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: hr-assistant-node-exporter
    ports:
      - "127.0.0.1:9100:9100"  # Только локальный доступ
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - hr_network
    restart: unless-stopped

  # Log Management: Logrotate
  logrotate:
    image: linkyard/docker-logrotate
    container_name: hr-assistant-logrotate
    volumes:
      - nginx_logs:/var/log/nginx
      - ./logs:/app/logs
      - ./logrotate.conf:/etc/logrotate.conf:ro
    environment:
      - LOGS_DIRECTORIES=/var/log/nginx /app/logs
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: hr-assistant-backup
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-hr_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-hr_assistant}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./uploads:/app/uploads:ro
    depends_on:
      - postgres
    networks:
      - hr_network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  nginx_logs:
    driver: local
  celery_beat_data:
    driver: local

# Networks
networks:
  hr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Дополнительные конфигурации для российских хостингов:
#
# Selectel Cloud:
# export DOMAIN=your-domain.ru
# export DB_PASSWORD=your-secure-password
# docker-compose -f docker-compose.prod.yml up -d
#
# Yandex Cloud:
# - Используйте Managed PostgreSQL вместо локального контейнера
# - Настройте Object Storage для uploads
# - Используйте Application Load Balancer
#
# VK Cloud:
# - Используйте внешний Redis кластер
# - Настройте Cloud Databases
# - Используйте Load Balancer из панели управления